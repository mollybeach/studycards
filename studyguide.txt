
// This is my study guide I'm pasting this into Quizlet to create flashcards for my exam. please help me format new data to match current format.

STUDY GUIDE: 


BACKEND PROGRAMMING
Q) BACKEND Programming and Data Structures How do you reverse a linked list? A)
To reverse a linked list, you iterate through the list, changing the next pointer of each node to point to the previous node instead. Initially, the previous node is "null" because the first node will become the last one in the reversed list.
Q) Can you explain the difference between an array and a linked list? A)
An array is a collection of elements stored at contiguous memory locations and can be accessed directly via indices. A linked list is a collection of nodes stored at potentially non-contiguous memory locations, where each node contains data and a reference or link to the next node in the sequence.
Q) Describe how you would implement a queue using two stacks. A)
To implement a queue using two stacks, use one stack for enqueue operations adding items and the other for dequeue operations removing items. For dequeue, if the second stack is empty. pop all elements from the first stack and push them onto the second stack, which reverses the order. allowing you to then pop the oldest element.
Q) What is a hash table and how does it work? A)
A hash table is a data structure that stores key-value pairs. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. Ideally, the hash function assigns each key to a unique bucket, but because hash functions may generate the same index for more than one key, a method for handling collisions is needed.
Q) Explain recursion and when you would use it over iterative solutions. A)
Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem. You would use recursion over iterative solutions when the problem can be naturally divided into similar subproblems, such as tree traversals, or when recursion simplifies the code and makes it more readable, despite potential efficiency losses.
Q) Databases What is the difference between SQL, and NoSQL databases A)
SQL databases are relational, table-based databases, designed for complex queries with ACID compliance. NoSQL databases are non-relational, and can store data in various formats like key-value pairs, document-based, wide-column stores, or graphs. They are designed for scalability and flexibility in handling large volumes of unstructured data.
Q) How would you design a schema for social media application ex Twitter A) 
A simplified schema could include tables for users, tweets, followers, and likes. Users table stores user information, tweets table for tweets with a foreign key linking to the user who posted it.
Followers table could map between users to represent following relationships. Likes table would link users and tweets to represent likes.
Q) Explain ACID properties in databases. A)
ACID stands for Atomicity, Consistency, Isolation, and Durability. Atomicity ensures that all parts of a transaction are completed successfully or none at all. Consistency ensures the database remains in a valid state before and after a transaction. Isolation ensures transactions are processed independently Durability guara + s that once a transaction is committed, It will not be lost even in the case of a system failure.
Q) What are database indexes and why are they important? A)
Database indexes are special lookup tables that the database search engine can use to speed up data retrieval. An index is created on one or more columns of a table, allowing the database engine to quickly find the rows matching some search criterion instead of scanning the entire table.
Q) How do you optimize a SQL query? A)
Optimizing a SQL query involves several strategies: selecting only the necessary columns instead of using SELECT *, using joins appropriately, indexing the columns that are frequently used in WHERE clauses, avoiding unnecessary complex calculations, and using query execution plans to identify bottlenecks.

LOAD BALANCERS
Q) What are Load Balancers? A)
Load balancing is a critical component in any high-availability, high-performance system. it distributes incoming network traffic across multiple servers to ensure no single server becomes overwhelmed, improving the responsiveness and availability of applications. Below are common interview questions related to load balancing, along with their answers:
Q) What is load balancing? A)
• Load balancing is the process of distributing network traffic across multiple servers to ensure no single server bears too much load. By balancing application requests among multiple servers, it increases reliability, availability, and performance of applications.
Q) Can you explain different types of load balancers? A)
Application Load Balancers, Global Server Load Balancing,  Hardware Load Balancer, Network Load Balancers,  Software Load Balancers
Q) Hardware Load Balancers: A) Physical devices designed to manage web traffic distribution.
Q) Software Load Balancers: A) Applications running on general-purpose hardware performing the same tasks as hardware load balancers.
Q) Application Load Balancers ALB A) Operate at the application layer Layer 7 and make routing decisions based on content of the request.
Q) Network Load Balancers NLB A)
Operate at the transport layer Layer 4 and route traffic based on IP address and port number.
Q) Global Server Load Balancing GSLB A) Distributes traffic across multiple data centers or cloud regions for global traffic management.
Q)  What are the key algorithms used for load balancing? A)
• Common algorithms include:
• Round Robin: Distributes each incoming request sequentially to the next server in a pool.
• Least Connections: Directs traffic to the server with the fewest active connections.
• IP Hash: Assigns a unique hash key based on the client's IP address, ensuring a client always reaches the same server.
• Weighted Algorithms: Variants of Round Robin or Least Connections that assign different weights to servers based on their capacity.
Q)  How does a load balancer handle session persistence? A)
• Session persistence, or sticky sessions, ensures that a client is consistently directed to the same server for the duration of a session. This can be achieved through methods like cookies, where a session identifier is stored in a cookie on the client side, or through IP hashing, where the client's IP address is used to consistently direct their traffic to the same server.
Q)  What is the difference between Layer 4 and Layer 7 load balancing? A)
• Layer 4 load balancing operates at the transport layer, making routing decisions based on IP address and port number without inspecting the content of the packets. It's faster and suited for simple load distribution.
• Layer 7 load balancing operates at the application layer, making decisions based on the content of the request such as URLs, headers, and message content. It enables more complex routing decisions based on actual application data but may introduce additional processing overhead.
Q) What is health checking in load balancing? A)
• Health checking is a mechanism used by load balancers to monitor the status of backend servers. It periodically checks the health of each server in the pool using methods such as HTTP checks, TCP checks, or custom scripts. If a server fails a health check, the load balancer stops directing traffic to it until it passes health checks again.
Q) Can you explain the concept of Direct Server Return DSR and its importance in load balancing?
• Direct Server Return DSR is a load balancing technique where the request from the client is routed through the load balancer to the f end server, but the response from the server goes directly back to the client, bypassing the load balancer. This is important for reducing
HTTPS
Q) Web Technologies Can you explain the difference between GET and POST HTTP methods? A)
GET is used to request data from a specified resource and should only retrieve data. POST is used to send data to a server to create/update a resource. The data sent by POST will be in the request body of the HTTP request.
Q) What are cookies and sessions? How are they different? A)
Cookies are small pieces of data stored on the client's browser and are sent with requests to the server. Sessions are stored on the server side and maintain data across requests from the same client. Sessions can store more data securely, as the data does not travel back and forth with each request.
Q) Explain RESTful APls. What are the principles of REST? A)
RESTful APis are designed around the principles of representational state transfer REST, using HTTP requests to communicate between clients and servers. Principles include stateless server communication, cacheable responses, a uniform interface, and a client-server architecture where concerns are separated.
Q) How do you secure a web application? A)
Securing a web application involves multiple strategies: using HTTPS, validating and sanitizing input to prevent injections, implementing



Q) List All 7 Types of Time Complexities A)
O1: Constant time,
Olog n Logarithmic time
On Linear time 
On log n Linearithmic time 
On^2 Quadratic time 
O2^n Exponential time
On!  Factorial time

Q) What is O1 Constant time ?  A) The execution time remains constant regardless of the input size. For example, accessing any element in an array by index.
Q) What is Olog n Logarithmic time ?  A) The execution time grows logarithmically as the input size increases.
Binary search is a classic example, where you divide the dataset in half each time.
Q) What is On Linear time  ?  A) The execution time grows linearly with the input size. For example, a loop that goes through each element in an array.
Q) What is On log n: Linearithmic time ?  A) Common in efficient sorting algorithms like mergesort and quicksort, where you divide the data and process each part linearly.
Q) What is On^2 Quadratic time ?  A)  The execution time grows quadratically with the input size. Seen in algorithms that involve nested loops over the data, such as bubble sort.
Q) What is O2^n  Exponential time ?  A)  The execution time doubles with each addition to the input data size.
Recursive algorithms solving the Fibonacci sequence naively can fall into this category.
Q) What is On!  Factorial time ?  A) The execution time grows factorially with the input size, making it impractical for even moderately large n. An example is solving the traveling salesman problem via brute force.
Q) List All 4 Types of Complexities Memory A)
O1 Constant space
Olog n Logarithmic space
Q) What is  O1 Constant space?  A) The algorithm uses a fixed amount of memory regardless of the input size For example, using temporary variables for swapping two elements.
Q) What is Olog n Logarithmic space?  A)  Rare, but it may occur in algorithms that divide the problem space in each step, using recursive calls that go log n levels deep.
Q) What is On Linear space? A) 
The memory used grows linearly with the input size. An example is creating a copy of an array.
Q) What is On log n / On*2 / O2*n / On! ?  A) These space complexities are less common but can occur, especially in algorithms that store a lot of state information, such as caching results in recursive calls which could lead to On log n or even 02^n space complexity in some cases.


BOTTLE NECK
Q) What is a bottleneck in coding? A)
• A bottleneck in coding refers to a point in the software or a section of the code that significantly reduces the performance or efficiency of the entire application. This constraint can limit the speed, throughput, or scalability of the system, causing delays and impacting the user experience.

HALF BAKED
Q) What is a half-baked library or software component? A)
A half-baked library or software component refers to one that is not fully developed, lacks essential features, or is not well-maintained. It may also imply that the library is not thoroughly tested or documented, making it difficult for users to rely on it for their needs.
Q) What are some characteristics of a half-baked library? A)
1. Incomplete Features: The library may be missing critical functionalities that are expected from similar libraries or tools. These missing features can hinder its usefulness.
2. Bugs and Issues: A half-baked library often contains unresolved bugs, issues, or glitches that can lead to unexpected behavior when used in real-world applications.
3. Lack of Documentation: Proper documentation is crucial for users to understand how to use a library effectively. A half-baked library may have insufficient or unclear documentation, making it challenging for developers to get started.
4. Limited Community Support: The library may not have an active user community or maintainers who can provide support, answer questions, or address problems promptly.
5. Outdated or Abandoned: Sometimes, a library starts as a promising project but becomes abandoned or outdated over time. This can result in compatibility issues with newer technologies or frameworks.
6. Poor Performance: The library may suffer from poor performance, making it unsuitable for production use or applications with high demands.
7. Unpredictable Behavior: Due to inadequate testing and validation, a half-baked library may exhibit unpredictable behavior in certain situations, leading to unexpected errors or crashes.
8. Security Concerns: Lack of security measures and vulnerability assessments can make the library prone to security risks and vulnerabilities.
Developers often encounter half-baked libraries when searching for third-party solutions to integrate into their projects. It's essential to carefully evaluate and research any library or component before using it in production to ensure it meets the required standards of quality. reliability, and support. Additionally, consider the library's community, documentation, and update frequency to gauge its overall health and reliability.

PURE FUNCTIONS
Q) What are pure functions in functional programming? A)
Pure functions and impure functions are concepts in functional programming that describe how a function behaves with respect to the data it operates on and whether it has side effects. Here's the difference between them:
1. Pure Function:
• A pure function is a function that, given the same input, will always produce the same output.
• It does not depend on or modify any external state or data. It only operates on its input parameters.
• It does not have any side effects, meaning it doesn't alter any data outside of its scope, such as global variables or external files.
• Pure functions are predictable and easy to test since they have no hidden dependencies or unexpected behavior.
• Examples of pure functions include mathematical operations and utility functions that do not change any data.
add(a, b) 
return a + b;
2. Impure Function:
• An impure function is a function that may produce different results for the same input, or it may have side effects that change data outside of its scope.
• It can rely on and modify external state or data, making it less predictable and harder to reason about.
• Impure functions can have side effects like modifying global variables, making network requests, or writing to files.
• Testing impure functions can be more challenging because you need to account for their side effects.
let total = 0;
function addToTotal (value) (
    total *= value:
}
In functional programming, it's generally recommended to write as many pure functions as possible because they make your code more maintainable, testable, and less error-prone. Impure functions should be used with caution and encapsulated when necessary to minimize their impact on the overall system and improve code quality.


Q) What is AJAX and how does it work?
A) AJAX stands for Asynchronous JavaScript and XML. It is a set of web development techniques that allow web pages to be updated asynchronously by exchanging data with a web server in the background. AJAX enables web pages to load content dynamically without requiring a full page refresh, providing a more seamless and interactive user experience.
Q) What are the key components of AJAX?
A) The key components of AJAX include:
• XMLHttpRequest object: Used to exchange data with a web server asynchronously.
• JavaScript: Used to handle events and update the web page dynamically.
• DOM: Used to manipulate the document structure and update the content of the web page.
• CSS: Used to style the content and layout of the web page.
Q) How do you make an AJAX request in JavaScript?
A) An AJAX request in JavaScript is made using the XMLHttpRequest object. The basic steps to make an AJAX request are:
1. Create an instance of the XMLHttpRequest object.
2. Define a callback function to handle the response from the server.
3. Open a connection to the server using the `open()` method.
4. Send the request to the server using the `send()` method.
5. Handle the response in the callback function.
Q) What is the difference between synchronous and asynchronous AJAX requests?
A) Synchronous AJAX requests block the execution of the JavaScript code until the request is complete, while asynchronous requests allow the code to continue executing while waiting for the response from the server. Asynchronous requests are preferred in web development to prevent the browser from becoming unresponsive and provide a better user experience.
Q) How do you handle errors in AJAX requests?
A) Errors in AJAX requests can be handled by checking the status and statusText properties of the XMLHttpRequest object. Common error codes include 404 (Not Found) and 500 (Internal Server Error). Error handling can be done in the onerror event handler of the XMLHttpRequest object.
Q) What are the security considerations when using AJAX?
A) Security considerations when using AJAX include:
• Cross-Origin Resource Sharing (CORS): Ensure that the server allows requests from the client's domain to prevent cross-site scripting attacks.
• Data Validation: Validate user input on the server to prevent SQL injection and other security vulnerabilities.
• HTTPS: Use HTTPS to encrypt data transmitted between the client and server to prevent e
Q) How do you handle CORS issues in AJAX requests?
A) CORS issues in AJAX requests can be handled by configuring the server to allow requests from the client's domain. This can be done by setting the Access-Control-Allow-Origin header on the server to specify which domains are allowed to make requests. Additionally, the server can respond with the Access-Control-Allow-Credentials header to allow credentials to be included in the request.
Q) What are some common use cases for AJAX in web development?
A) Common use cases for AJAX in web development include:
• Loading content dynamically without refreshing the page.
• Submitting form data asynchronously.
• Autocomplete search functionality.
• Real-time updates and notifications.
• Infinite scrolling on web pages.
Q) How do you debug AJAX requests in the browser?
A) AJAX requests can be debugged in the browser using the developer tools. The Network tab in the developer tools allows you to inspect the details of AJAX requests, including the request and response headers, status codes, and response data. Additionally, you can use console.log() statements in your JavaScript code to log information about the AJAX requests and responses.
Q) What are some alternatives to AJAX in web development?
A) Some alternatives to AJAX in web development include:
• Fetch API: A modern JavaScript API for making asynchronous requests that is more flexible and easier to use than the XMLHttpRequest object.
• Axios: A popular JavaScript library for making HTTP requests that provides a simple and intuitive API for handling AJAX requests.
• WebSockets: A communication protocol that allows for real-time, bidirectional communication between the client and server, enabling features like chat applications and live updates.
• Server-Sent Events: A standard for creating a one-way connection from the server to the client for streaming updates and notifications.
Q) How do you optimize AJAX requests for performance?
A) AJAX requests can be optimized for performance by:
• Minimizing the number of requests: Combine multiple requests into a single request or use caching to reduce the number of requests.
• Compressing data: Use compression techniques like GZIP to reduce the size of the data transferred between the client and server.
• Implementing lazy loading: Load content only when it is needed to reduce the initial page load time.
• Using a content delivery network (CDN): Serve static assets from a CDN to reduce latency and improve performance.
• Implementing server-side caching: Cache data on the server to reduce the response time for subsequent requests.
Q) How do you handle AJAX requests in a single-page application SPA?
A) AJAX requests in a single-page application SPA can be handled using JavaScript frameworks like React, Angular, or Vue.js. These frameworks provide built-in features for making AJAX requests, managing state, and updating the DOM dynamically. Additionally, SPAs can use client-side routing to handle navigation and update the content of the page without reloading the entire page.
Q) What are some best practices for using AJAX in web development?
A) Best practices for using AJAX in web development include:
• Use asynchronous requests: Prefer asynchronous requests to prevent the browser from becoming unresponsive.
• Handle errors gracefully: Implement error handling to provide feedback to users in case of failed requests.
• Optimize performance: Minimize the number of requests, compress data, and use caching to improve performance.
• Secure your requests: Implement CORS, validate user input, and use HTTPS to secure data transmitted between the client and server.
• Test your requests: Test AJAX requests thoroughly to ensure they work as expected and handle edge cases and errors appropriately.
Q) How do you implement pagination using AJAX in web development?
A) Pagination using AJAX in web development involves loading content in chunks or pages without refreshing the entire page. The basic steps to implement pagination using AJAX are:
1. Create a server-side endpoint to fetch paginated data.
2. Make an AJAX request to the server to fetch the data for the current page.
3. Update the content of the page with the fetched data.
4. Implement navigation controls like previous and next buttons to load the next or previous page of data.
5. Handle user interactions and update the content dynamically using JavaScript.
Q) What are some common pitfalls to avoid when using AJAX in web development?
A) Common pitfalls to avoid when using AJAX in web development include:
• Not handling errors: Failing to implement error handling can leave users without feedback in case of failed requests.
• Overusing AJAX: Making too many requests or unnecessary requests can impact performance and user experience.
• Not securing requests: Failing to secure AJAX requests can expose sensitive data and lead to security vulnerabilities.
• Not optimizing performance: Failing to optimize AJAX requests can result in slow page load times and poor performance.
• Not testing thoroughly: Failing to test AJAX requests thoroughly can lead to bugs and unexpected behavior in the application.
Q) How do you implement autocomplete functionality using AJAX in web development?
A) Autocomplete functionality using AJAX in web development involves fetching suggestions from the server as the user types in an input field. The basic steps to implement autocomplete functionality using AJAX are:
1. Create a server-side endpoint to fetch autocomplete suggestions based on the user input.
2. Make an AJAX request to the server with the user input as a parameter.
Q) How do I install/use AJAX in my web development project?
A) AJAX is a technique that can be used in web development projects to make asynchronous requests to the server and update the content of the page dynamically. To use AJAX in your project, you can follow these steps:
1. Include the necessary JavaScript libraries like jQuery or use the native XMLHttpRequest object.
2. Write JavaScript code to make AJAX requests to the server and handle the response.
3. Implement error handling, loading indicators, and other features to enhance the user experience.
4. Test the AJAX functionality thoroughly to ensure it works as expected and handles edge cases and errors appropriately.
5. Optimize the performance of AJAX requests by minimizing the number of requests, compressing data, and using caching techniques.
By following these steps, you can effectively use AJAX in your web development project to create dynamic and interactive web applications.





NEW DATA

PLEASE USE MY NEW DATA TO FORMAT TO MATCH THE STUDY GUIDE QUESTIONS ABOVE ALSO THIS NEW DATA IS FROM A SCAN OF AN IMAGE SO THERE MAY BE SOME ERRORS IN THE TEXT PLEASE MODIFIY WHERE NEEDED
AJAX








studycards/
├── CloudProviders
│   ├── AWS/
│   ├── Azure/
│   ├── GCP/
│   └── CloudProviders.txt
├── Blockchain/
│   ├── Ethereum/
│   ├── SmartContracts/
│   ├── DeFi/
│   ├── Blockchain Security/
│   └── Blockchain.txt
├── Databases/
│   ├── AWS/
│   ├── MongoDB/
│   ├── MySQL/
│   ├── PostgreSQL/
│   └── Databases.txt
├── DesignPatterns/
│   ├── Adapter/
│   ├── Builder/
│   ├── ChainofResponsibility/
│   ├── Command/
│   ├── Composite/
│   ├── Decorator/
│   ├── Factory/
│   ├── Observer/
│   ├── Proxy/
│   ├── Singleton/
│   ├── State/
│   ├── Strategy/
│   ├── TemplateMethod/
│   ├── Visitor/
│   └── DesignPatterns.txt
├── DevOps/
│   ├── Collaboration/
│   │   ├── Jira/
│   │   ├── Slack/
│   │   └── Collaboration.txt
│   ├── ConfigurationManagement/
│   │   ├── Ansible/
│   │   ├── Chef/
│   │   ├── Puppet/
│   │   └── ConfigurationManagement.txt
│   ├── Containerization/
│   │   ├── Docker/
│   │   ├── Kubernetes/
│   │   └── Containerization.txt
│   ├── ContinuousIntegration/
│   │   ├── CircleCI/
│   │   ├── Jenkins/
│   │   ├── TravisCI/
│   │   └── ContinuousIntegration.txt
│   ├── Methodologies /
│   │   ├── Agile/
│   │   ├── Kanban/
│   │   ├── Lean/
│   │   ├── PairProgramming/
│   │   ├── CodeReview/
│   │   ├── Scrum/
│   │   └── Methodologies.txt
│   ├── Monitoring/
│   │   ├── Datadog/
│   │   ├── NewRelic/
│   │   ├── Prometheus/
│   │   └── Monitoring.txt
│   ├── VersionControl/
│   │   ├── Git/
│   │   ├── GitHub/
│   │   ├── GitLab/
│   │   └── VersionControl.txt
│   └── DevOps.txt
├── Frameworks/
│   ├── Angular/
│   ├── Django/
│   ├── React/
│   └── Frameworks.txt
├── Graphics/
│   ├── Three.js/
│   ├── Unity/
│   └── Graphics.txt
├── Languages/
│   ├── C++/
│   ├── Java/
│   ├── JavaScript/
│   ├── Python/
│   ├── Ruby/
│   ├── Rust/
│   ├── Solidity/
│   ├── TypeScript/
│   └── Languages.txt
├── Security/
│   ├── Authentication/
│   ├── Authorization/
│   ├── Encryption/
│   ├── Hashing/
│   ├── OWASP/
│   ├── XSS/
│   └── Security.txt
├── Testing/
│   ├──Jest/
│   ├──Mocha/
│   ├──Chai/
│   └── Testing.txt
└── README.md


                     



where should Time Complexities be placed in the study guide above ?
where should Memory Complexities be placed in the study guide above ?
where should Bottleneck be placed in the study guide above ? Bottleneck should be placed in 
where should Half Baked be placed in the study guide above ?
where should Pure Functions be placed in the study guide above ?
where should AJAX be placed in the study guide above ?

    