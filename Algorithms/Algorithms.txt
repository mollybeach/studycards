@ Algorithms
@@ Two Sum
Q) Given an array of integers, return indices of the two numbers such that they add up to a specific target.
A) Use a hash map to store the difference between the target and the current number and the index of the current number. If the current number is in the hash map, return the index of the current number and the index of the number in the hash map.
Algorithm used: Hash Map
Time Complexity: O(n)
Space Complexity: O(n)

```javascript
 const twoSum = function(nums, target) {
    let map = new Map();
    for (let i = 0; i < nums.length; i++) {
        let diff = target - nums[i];
        if (map.has(diff)) {
            return [map.get(diff), i];
        }
        map.set(nums[i], i);
    }
};
```
@@ Best Time to Buy and Sell Stock
Q: Determine the maximum profit by buying and selling stocks from an array.
A: Use a single pass approach, keeping track of the minimum price encountered so far and calculating the profit for each day. Update the maximum profit accordingly.
Algorithm used: Single Pass
Time Complexity: O(n)
Space Complexity: O(1)
Code Snippet in JavaScript:

```javascript
const maxProfit = function(prices) {
    let minPrice = Infinity;
    let maxProfit = 0;
    for (let price of prices) {
        if (price < minPrice) {
            minPrice = price;
        } else if (price - minPrice > maxProfit) {
            maxProfit = price - minPrice;
        }
    }
    return maxProfit;
};
```
@@ Add Two Numbers
Q) You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
A) Traverse both linked lists and add the values of the nodes and the carry. If the sum is greater than 9, set the carry to 1 and the sum to sum % 10. Create a new node with the sum and move to the next node in the linked list. If there is a carry after the last node, create a new node with the carry.
Algorithm used: Linked List
Time Complexity: O(n)
Space Complexity: O(n)
Code Snipped in JavaScript:
```javascript
const addTwoNumbers = function(l1, l2) {
    let dummy = new ListNode(0);
    let current = dummy;
    let carry = 0;
    while (l1 || l2) {
        let sum = carry;
        if (l1) {
            sum += l1.val;
            l1 = l1.next;
        }
        if (l2) {
            sum += l2.val;
            l2 = l2.next;
        }
        if (sum > 9) {
            carry = 1;
            sum = sum % 10;
        } else {
            carry = 0;
        }
        current.next = new ListNode(sum);
        current = current.next;
    }
    if (carry) {
        current.next = new ListNode(carry);
    }
    return dummy.next;
};

@@ Longest Substring Without Repeating Characters
Q) Given a string, find the length of the longest substring without repeating characters.
A) Use a hash map to store the index of the characters in the string. Use two pointers to traverse the string. If the character is in the hash map, move the left pointer to the index of the character in the hash map + 1. Update the maximum length of the substring.
Algorithm used: Hash Map
Time Complexity: O(n)
Space Complexity: O(n)
Code Snipped in JavaScript:
```javascript
const lengthOfLongestSubstring = function(s) {
    let map = new Map();
    let left = 0;
    let max = 0;
    for (let right = 0; right < s.length; right++) {
        if (map.has(s[right])) {
            left = Math.max(left, map.get(s[right]) + 1);
        }
        map.set(s[right], right);
        max = Math.max(max, right - left + 1);
    }
    return max;
};

@@ Median of Two Sorted Arrays
Q) There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays.
A) Merge the two sorted arrays into a single sorted array. If the length of the merged array is odd, return the middle element. If the length of the merged array is even, return the average of the two middle elements.
Algorithm used: Merge Sort
Time Complexity: O(m + n)
Space Complexity: O(m + n)
Code Snipped in JavaScript:
```javascript
const findMedianSortedArrays = function(nums1, nums2) {
    let merged = [];
    let i = 0;
    let j = 0;
    while (i < nums1.length && j < nums2.length) {
        if (nums1[i] < nums2[j]) {
            merged.push(nums1[i]);
            i++;
        } else {
            merged.push(nums2[j]);
            j++;
        }
    }
    while (i < nums1.length) {
        merged.push(nums1[i]);
        i++;
    }
    while (j < nums2.length) {
        merged.push(nums2[j]);
        j++;
    }
    let n = merged.length;
    if (n % 2 === 0) {
        return (merged[n / 2 - 1] + merged[n / 2]) / 2;
    } else {
        return merged[Math.floor(n / 2)];
    }
};

@@ Longest Palindromic Substring
Q) Given a string s, find the longest palindromic substring in s.
A) Use dynamic programming to store the palindromic substrings. Traverse the string and expand around the center for odd and even length palindromic substrings. Update the longest palindromic substring.
Algorithm used: Dynamic Programming
Time Complexity: O(n^2)
Space Complexity: O(n^2)
Code Snipped in JavaScript:
```javascript
const longestPalindrome = function(s) {
    let n = s.length;
    let dp = Array.from({ length: n }, () => Array(n).fill(false));
    let start = 0;
    let max = 1;
    for (let i = 0; i < n; i++) {
        dp[i][i] = true;
    }
    for (let i = 0; i < n - 1; i++) {
        if (s[i] === s[i + 1]) {
            dp[i][i + 1] = true;
            start = i;
            max = 2;
        }
    }
    for (let len = 3; len <= n; len++) {
        for (let i = 0; i < n - len + 1; i++) {
            let j = i + len - 1;
            if (s[i] === s[j] && dp[i + 1][j - 1]) {
                dp[i][j] = true;
                start = i;
                max = len;
            }
        }
    }
    return s.substring(start, start + max);
};

@@ ZigZag Conversion
Q) The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
A) Use an array of strings to store the characters in each row. Traverse the string and add the characters to the corresponding row. Concatenate the rows to get the zigzag pattern.
Algorithm used: Array
Time Complexity: O(n)
Space Complexity: O(n)
Code Snipped in JavaScript:
```javascript
const convert = function(s, numRows) {
    if (numRows === 1) {
        return s;
    }
    let rows = Array.from({ length: numRows }, () => '');
    let index = 0;
    let step = 1;
    for (let i = 0; i < s.length; i++) {
        rows[index] += s[i];
        if (index === 0) {
            step = 1;
        }
        if (index === numRows - 1) {
            step = -1;
        }
        index += step;
    }
    return rows.join('');
};

@@ Reverse Integer
Q) Given a 32-bit signed integer, reverse digits of an integer.
A) Use the modulo operator to get the last digit of the integer and the division operator to remove the last digit of the integer. Multiply the reversed integer by 10 and add the last digit. Check for overflow.
Algorithm used: Math
Time Complexity: O(log(x))
Space Complexity: O(1)
Code Snipped in JavaScript:
```javascript
const reverse = function(x) {
    let reversed = 0;
    while (x !== 0) {
        let digit = x % 10;
        x = (x / 10) | 0;
        reversed = reversed * 10 + digit;
        if (reversed < Math.pow(-2, 31) || reversed > Math.pow(2, 31) - 1) {
            return 0;
        }
    }
    return reversed;
};

@@ String to Integer (atoi)
Q) Implement atoi which converts a string to an integer.
A) Trim the string and check for the sign of the integer. Traverse the string and convert the characters to integers. Check for overflow.
Algorithm used: Math
Time Complexity: O(n)
Space Complexity: O(1)
Code Snipped in JavaScript:
```javascript
const myAtoi = function(str) {
    let i = 0;
    let sign = 1;
    let result = 0;
    while (str[i] === ' ') {
        i++;
    }
    if (str[i] === '+' || str[i] === '-') {
        sign = str[i] === '+' ? 1 : -1;
        i++;
    }
    while (i < str.length) {
        let digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);
        if (digit < 0 || digit > 9) {
            break;
        }
        if (result > Math.floor((Math.pow(2, 31) - digit) / 10)) {
            return sign === 1 ? Math.pow(2, 31) - 1 : -Math.pow(2, 31);
        }
        result = result * 10 + digit;
        i++;
    }
    return sign * result;
};

9. Palindrome Number
10. Regular Expression Matching
11. Container With Most Water
12. Integer to Roman
13. Roman to Integer


