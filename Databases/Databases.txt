@ DATABASES

@@ DATABASE FUNDAMENTALS
Q) Databases?
A) Databases are organized collections of data that store, retrieve, and manage information for software applications.
Q) Key components of a database?
A) Components include tables, columns, rows, indexes, and relationships.
Q) Different types of databases?
A) Types include relational, NoSQL, document, key-value, and graph databases.
Q) Popular relational database management systems (RDBMS)?
A) Popular RDBMS include MySQL, PostgreSQL, Oracle Database, and Microsoft SQL Server.

@@ RELATIONAL DATABASES
Q) Relational database?
A) A relational database stores and organizes data in tables with rows and columns, using SQL for data interaction.

@@ DATABASE MANAGEMENT SYSTEMS
Q) Database management system (DBMS)?
A) A DBMS manages databases, providing tools for creating, updating, querying, and maintaining data.
Q) Popular DBMS?
A) Popular DBMS include MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server, and MongoDB.

@@ CRUD OPERATIONS
Q) CRUD operations?
A) CRUD stands for Create, Read, Update, Delete.
Q) Read CRUD operation?
A) Retrieves data without modifying it.
Q) Create CRUD operation?
A) Adds new data.
Q) Update CRUD operation?
A) Modifies existing data.
Q) Delete CRUD operation?
A) Removes data.
Q) CRUD operations and HTTP methods?
A) Create: POST, Read: GET, Update: PUT or PATCH, Delete: DELETE.

@@ AWS DATABASES
Q) Amazon RDS?
A) Amazon RDS is a managed service for relational databases in the cloud.
Q) Key features of Amazon RDS?
A) Features include automated backups, scalability, high availability, monitoring, and security.
Q) Amazon Aurora?
A) Amazon Aurora is a high-performance, scalable relational database compatible with MySQL and PostgreSQL.
Q) Amazon DynamoDB?
A) Amazon DynamoDB is a fully managed NoSQL database for fast and predictable performance.
Q) Use Amazon RDS?
A)
• Choose a database engine (MySQL, PostgreSQL, Oracle, SQL Server, Amazon Aurora).
• Configure database instance size, storage, and backup settings.
• Connect to the database using the provided endpoint.
• Manage the database using the AWS Management Console, CLI, or SDKs.
Q) Amazon RDS code?
A)
```javascript
// Amazon RDS Example
const mysql = require('mysql');
const connection = mysql.createConnection({
  host: 'database-1.cq7zjxjzjz.us-east-1.rds.amazonaws.com',
  user: 'admin',
    password: 'password',
    database: 'mydb'
});

connection.connect((err) => {
  if (err) throw err;
  console.log('Connected to Amazon RDS');
  connection.end();
});
```

@@ MONGODB
Q) MongoDB?
A) MongoDB is a NoSQL database storing data in flexible, JSON-like documents.
Q) Key features of MongoDB?
A) Features include document-oriented storage, scalability, high performance, flexible schema, and rich query language.
Q) MongoDB Atlas?
A) MongoDB Atlas is a cloud-based database service for MongoDB.
Q) Connect to MongoDB?
A) Connect using the MongoDB shell, drivers like Mongoose for Node.js, or MongoDB Compass GUI tool.
Q) Connect to MongoDB code?
A)
```javascript
// MongoDB Example
const MongoClient = require('mongodb').MongoClient;
const uri = 'mongodb://localhost:27017';
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

client.connect(err => {
  if (err) throw err;
  const collection = client.db('test').collection('devices');
  collection.insertOne({ name: 'laptop', price: 1000 }, (err, result) => {
    if (err) throw err;
    console.log('Inserted: ', result.insertedId);
    client.close();
  });
});
```

@@ POSTGRESQL
Q) PostgreSQL?
A) An open-source RDBMS known for reliability, scalability, and extensibility.
Q) Key features of PostgreSQL?
A) Features include ACID compliance, extensibility, advanced data types, indexing, and full-text search.
Q) Connect to PostgreSQL?
A) Connect using the psql command-line client, GUI tools, or language-specific drivers like psycopg2 for Python.
Q) PostgreSQL vs. MySQL?
A) PostgreSQL offers advanced features like JSON support, Common Table Expressions, and window functions compared to MySQL.
Q) PostgreSQL data types?
A) Data types include integer, text, boolean, date, time, JSON, and UUID.
Q) PostgreSQL indexes?
A) Indexes improve data retrieval performance.
Q) Use/launch PostgreSQL?
A)
• Install PostgreSQL on your local machine or a server.
• Launch the PostgreSQL server.
• Connect to the database using the psql command-line client or a GUI tool.
• Start working with the database using SQL queries.
Q) PostgreSQL code?
A)
```sql
-- PostgreSQL Example
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL
);
INSERT INTO users (username, email) VALUES ('john_doe', 'john@example.com');
SELECT * FROM users;
```

@@ MYSQL
Q) MySQL?
A) An open-source RDBMS known for speed, reliability, and ease of use.
Q) Key features of MySQL?
A) Features include ACID compliance, scalability, replication, high availability, and security.
Q) Primary Key in MySQL?
A) A primary key uniquely identifies each record in a table.
Q) Foreign Key in MySQL?
A) A foreign key establishes a relationship between two tables.
Q) Index in MySQL?
A) An index improves data retrieval performance.
Q) Stored Procedure in MySQL?
A) A stored procedure is a prepared SQL code stored in the database.
Q) Trigger in MySQL?
A) A trigger is a set of SQL statements that automatically "fires" when a specified event occurs.
Q) Connect to MySQL?
A) Connect using the MySQL command-line client, GUI tools, or language-specific drivers like JDBC for Java or MySQL Connector for Python.
Q) My SQL Workbench?
A) MySQL Workbench is a visual database design tool for data modeling, SQL development, and database administration.
Q) MySQL Cluster?
A) MySQL Cluster is a distributed, shared-nothing, real-time, ACID-compliant database.
Q) MySQL Workbench? 
A) MySQL Workbench is a visual database design tool for data modeling, SQL development, and database administration.
Q) Use/launch MySQL Workbench? 
A) 
• Download and install MySQL Workbench on your local machine.
• Launch MySQL Workbench.
• Connect to a MySQL database using the connection details.
• Start working with the database using the visual tools and SQL editor.
Q) MySQL code?
A)
```sql
-- MySQL Example
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL
);
INSERT INTO users (username, email) VALUES ('john_doe', 'john@example.com');
SELECT * FROM users;
```

@@ GRAPHQL
Q) GraphQL?
A) GraphQL is a query language for APIs enabling clients to request specific data.
Q) Key features of GraphQL?
A) Features include strongly typed schema, hierarchical queries, client-defined responses, real-time updates, and tooling support.
Q) How GraphQL works?
A) GraphQL defines a schema describing API types and fields, allowing clients to query data efficiently.
Q) GraphQL schema?
A) A schema defines types, queries, mutations, and subscriptions in a GraphQL API.
Q) GraphQL queries?
A) Queries request data from the server.
Q) GraphQL mutations?
A) Mutations modify data on the server.
Q) GraphQL subscriptions?
A) Subscriptions enable real-time data updates.
``` graphl
subscription {
  newPost {
    id
    title
    content
    author{
        username
    }
  }
}
Q) GraphQL vs. REST?
A) GraphQL offers more flexibility, efficiency, and type safety compared to REST APIs.
Q) Use/launch GraphQL?
A)
• Define a schema using the GraphQL Schema Definition Language (SDL).
• Implement resolvers to fetch data for queries, mutations, and subscriptions.
• Set up a GraphQL server using tools like Apollo Server or Express with express-graphql.
• Interact with the GraphQL API using a client like Apollo Client or GraphiQL.
Q) GraphQL Schema in Code?
A)
```graphql
type User {
  id: ID!
  username: String!
  email: String!
  posts: [Post!]!
}
type Post {
  id: ID!
  title: String!
  content: String!

# Root Type for Read Operations
type Query {
  users: [User!]!
  posts
}
# Root Type for Write Operations
type Mutation {
  createUser(username: String!, email: String!): User!
  createPost(title: String!, content: String!): Post!
}
# Root Type for Real-Time Updates
type Subscription {
  newPost: Post!
}
```

@@ REST
Q) REST?
A) REST is an architectural style using HTTP for client-server communication.
Q) Key principles of REST?
A) Principles include resource-based URLs, uniform interface, statelessness, client-server architecture, and layered system.
Q) Key components of a RESTful API?
A) Components include resources, URIs, HTTP methods, headers, and status codes.
Q) Resource in a RESTful API?
A) A resource is an entity accessed and manipulated via URIs.
Q) URI in a RESTful API?
A) A URI uniquely identifies a resource.
Q) HTTP methods in a RESTful API?
A) Methods like GET, POST, PUT, PATCH, DELETE perform CRUD operations.
Q) HTTP headers in a RESTful API?
A) Headers provide metadata in requests or responses.
Q) HTTP status codes in a RESTful API?
A) Codes indicate request outcomes.

@@ NO-SQL DATABASES
Q) NoSQL?
A) NoSQL databases store and retrieve data flexibly, designed for scalability, performance, and diverse data types.
Q) Key features of NoSQL databases?
A) Features include flexible data models, scalability, high availability, performance, and schema-less design.
Q) How to use/launch a NoSQL database?
A)
• Choose a NoSQL database based on requirements (key-value, document, column-family, graph).
• Install and configure the NoSQL database on a server or cloud platform.
• Use the database-specific client libraries or drivers to interact with the database.
• Design data models and queries based on the database type and requirements.
Q) Connect to a NoSQL database code? 
A)
```javascript
// MongoDB Example
const MongoClient = require('mongodb').MongoClient;
const uri = 'mongodb://localhost:27017';
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

client.connect(err => {
  if (err) throw err;
  const collection = client.db('test').collection('devices');
  collection.insertOne({ name: 'laptop', price: 1000 }, (err, result) => {
    if (err) throw err;
    console.log('Inserted: ', result.insertedId);
    client.close();
  });
});
```

@@ ORACLE
Q) Oracle Database?
A) Oracle is a commercial RDBMS known for scalability, security, and performance.
Q) Key features of Oracle Database?
A) Features include scalability, security, high availability, performance, and extensibility.
Q) How Oracle Database stores data?
A) Oracle stores data in tables within schemas.
Q) When to use Oracle Database?
A) Use Oracle for enterprise applications, data warehousing, and cloud services.
Q) How to connect to Oracle Database?
A) Connect using SQLPlus, a GUI tool, or language-specific drivers like JDBC for Java or cx_Oracle for Python.
Q) Connect to Oracle Database code?
A)
```java
// Java JDBC Example
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class OracleJDBCExample {
  public static void main(String[] args) {
    String url = "jdbc:oracle:thin:@localhost:1521:xe";
    String user
    String password = "password";
    try {
      Connection connection = DriverManager.getConnection(url, user, password);
      System.out.println("Connected to Oracle Database");
      connection.close();
    } catch (SQLException e) {
      System.out.println("Connection failed");
      e.printStackTrace();
    }
    }
}
```


