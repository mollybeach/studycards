DESIGN PATTERNS
Q) What are design patterns?
A) Design patterns are reusable solutions to common software design problems, helping to create maintainable, flexible, and scalable software.
Q) Why are design patterns important?
A) They provide a common language and best practices for software design, aiding communication and collaboration among developers and preventing common pitfalls.
Q) What are the benefits of using design patterns?
A) Benefits include reusability, maintainability, flexibility, scalability, and improved collaboration.
Q) What are the different types of design patterns?
A) Types include creational patterns (object creation), structural patterns (object composition), and behavioral patterns (object interaction).
Q) What are 5 common design patterns?
A) Singleton, Factory, MVC (Model-View-Controller), Observer, and Decorator.
Q) How do you choose the right design pattern for a given problem?
A) Consider the problem domain, design principles, common patterns, trade-offs, flexibility, and team collaboration.


MVC
Q) What is the Model-View-Controller MVC pattern?
A) MVC separates an application into model (data/business logic), view (user interface), and controller (handles user input and updates model and view).
Q) What are the benefits of using the MVC pattern?
A) Benefits include separation of concerns, reusability, testability, and scalability.
Q) How does the Model-View-Controller MVC pattern work?
A) The controller receives user input, updates the model, and updates the view to reflect changes.
Q) What is the role of the model in the MVC pattern?
A) The model manages data and business logic, notifying the view of changes.
Q) What is the role of the view in the MVC pattern?
A) The view displays data and captures user input, updating based on model changes.
Q) What is the role of the controller in the MVC pattern?
A) The controller handles user interactions, updating the model and view accordingly.
Q) How do you implement the MVC pattern in a web application?
A) Use separate components for model, view, and controller, using frameworks like Angular, React, or Vue.js.

Singleton
Q) What is the Singleton design pattern?
A) Singleton ensures a class has only one instance and provides a global point of access to it.
Q) How do you implement the Singleton design pattern in Java?
A) Use a private constructor, a static method to return the instance, and a static variable to hold the instance.
Q) What are the key features of the Singleton design pattern?
A) Private constructor, static method, static variable, lazy initialization, and thread safety.
Q) What are some common use cases for the Singleton design pattern?
A) Logging, configuration settings, database connections, caching, and thread pools.
Q) What are some drawbacks of the Singleton design pattern?
A) Global state, tight coupling, thread safety complexity, testing challenges, and difficulty with dependency injection.

Factory
Q) What is the Factory design pattern?
A) Factory provides an interface for creating objects in a superclass but allows subclasses to alter the type of created objects.
Q) What are the key features of the Factory design pattern?
A) Interface for object creation, concrete classes, subclassing, encapsulation, and flexibility.
Q) What are some common use cases for the Factory design pattern?
A) Database connections, logging, configuration settings, user interfaces, and file formats.
Q) What are some alternatives to the Factory design pattern?
A) Abstract Factory, Builder, Prototype, Singleton, and Dependency Injection patterns.

Observer
Q) What is the Observer design pattern?
A) Observer defines a one-to-many dependency where one object notifies multiple observers of changes.
Q) What are the key features of the Observer design pattern?
A) Subject, observer, subscription, notification, and loose coupling.
Q) What are some common use cases for the Observer design pattern?
A) Event handling, user interfaces, messaging systems, distributed systems, and logging.
Q) What are some alternatives to the Observer design pattern?
A) Pub/Sub, Mediator, event-driven architecture, reactive programming, and Command pattern.

Decorator
Q) What is the Decorator design pattern?
A) Decorator allows behavior to be added to objects dynamically without affecting other objects of the same class.
Q) What are the key features of the Decorator design pattern?
A) Component interface, concrete components, decorators, composition, and adherence to the open/closed principle.
Q) What are some common use cases for the Decorator design pattern?
A) Logging, encryption, validation, caching, and compression.